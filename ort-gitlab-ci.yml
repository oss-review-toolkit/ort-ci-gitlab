# Copyright (C) 2020-2022 HERE Europe B.V.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

ort-scan:
  image: alpine
  stage: ort-scan
  interruptible: true
  before_script:
    - apk add curl jq
  script:
    - |
      ORT_GITLAB_CI_REVISION=${OSS_GITLAB_CI_REVISION:-main}
      resp=$(
        curl -fksSL --request POST \
          --form "token=${ORT_TRIGGER_API_TOKEN}" \
          --form "variables[SW_NAME]=$SW_NAME" \
          --form "variables[SW_VERSION]=$SW_VERSION" \
          --form "variables[VCS_URL]=$VCS_URL" \
          --form "variables[ORT_CONFIG_FILE]=$ORT_CONFIG_FILE" \
          --form "variables[ORT_ALLOW_DYNAMIC_VERSIONS]=$ORT_ALLOW_DYNAMIC_VERSIONS" \
          --form "variables[DISABLE_SHALLOW_CLONE]=$DISABLE_SHALLOW_CLONE" \
          --form "variables[FAIL_ON_OUTDATED_NOTICE_FILE]=$FAIL_ON_OUTDATED_NOTICE_FILE" \
          --form "variables[ORT_DISABLE_EVALUATOR]=$ORT_DISABLE_EVALUATOR" \
          --form "variables[ORT_DISABLE_SCANNER]=$ORT_DISABLE_SCANNER" \
          --form "variables[NOTICE_FILE]=$NOTICE_FILE" \
          --form "variables[UPSTREAM_BRANCH]=$CI_COMMIT_REF_NAME" \
          --form "variables[UPSTREAM_PROJECT_ID]=$CI_PROJECT_ID" \
          --form "variables[UPSTREAM_PROJECT_PATH]=$CI_PROJECT_PATH" \
          --form "variables[UPSTREAM_PROJECT_REPOSITORY_LANGUAGES]=$CI_PROJECT_REPOSITORY_LANGUAGES" \
          --form "variables[UPSTREAM_PROJECT_TITLE]=$CI_PROJECT_TITLE" \
          --form "variables[UPSTREAM_USER_LOGIN]=$GITLAB_USER_LOGIN" \
          --form "variables[UPSTREAM_PROJECT_URL]=$CI_PROJECT_URL" \
          --form "variables[UPSTREAM_REPOSITORY_URL]=$CI_REPOSITORY_URL" \
          --form "variables[UPSTREAM_COMMIT_SHA]=$CI_COMMIT_SHA" \
          --form "variables[UPSTREAM_MERGE_REQUEST_IID]=$CI_MERGE_REQUEST_IID" \
          --form "variables[UPSTREAM_PIPELINE_URL]=$CI_PIPELINE_URL" \
          --form "variables[DEPENDENT_ON_JOB_ID]=$DEPENDENT_ON_JOB_ID" \
          --form "ref=${ORT_GITLAB_CI_REVISION}" ${CI_API_V4_URL}/projects/${ORT_GITLAB_CI_PROJECT_ID}/trigger/pipeline \
      )
      PIPELINE_ID=$(echo $resp | jq -r '.id')
      web_url=$(echo $resp | jq -r '.web_url')

      ORT_POLLING_TIMEOUT=${ORT_POLLING_TIMEOUT:-1800} # Total possible duration of ORT scan in seconds

      echo "Waiting for pipeline $web_url ..."
      # Check status every 10 seconds for 30 mins (1800 seconds) by default
      # The seq parameters syntax is 'seq FIRST INCREMENT LAST'. Start from 10 and keep sleep in first line as 
      # there is no chance that downstream pipeline will finish imidiatelly.
      for elapsed_time in $(seq 10 10 ${ORT_POLLING_TIMEOUT}); do
        sleep 10
        status=$(curl -sS -H "PRIVATE-TOKEN:$ORT_READ_API_TOKEN" "${CI_API_V4_URL}/projects/${ORT_GITLAB_CI_PROJECT_ID}/pipelines/${PIPELINE_ID}" | jq -r '.status')
        echo "Got pipeline status $status, elapsed time in seconds - $elapsed_time/${ORT_POLLING_TIMEOUT}"
        [[ $status == "success" || $status == "failed" || $status == "canceled" ]] && break
      done

      [[ $status != "success" && $status != "failed" ]] && { echo "$web_url has status $status. Failing by timeout."; exit 1; }

      # Fetch id of latest finished job in this pipeline
      JOB_ID=$(curl -sS -H "PRIVATE-TOKEN:$ORT_READ_API_TOKEN" "${CI_API_V4_URL}/projects/${ORT_GITLAB_CI_PROJECT_ID}/pipelines/${PIPELINE_ID}/jobs?scope[]=${status}&per_page=${PER_PAGE:-50}" | jq 'sort_by(.finished_at)[-1].id')
      echo "Downloading artifacts from ${CI_API_V4_URL}/projects/${ORT_GITLAB_CI_PROJECT_ID}/jobs/$JOB_ID/artifacts"
      curl -fksSL -o ort_artifacts.zip -H "PRIVATE-TOKEN:$ORT_READ_API_TOKEN" "${CI_API_V4_URL}/projects/${ORT_GITLAB_CI_PROJECT_ID}/jobs/$JOB_ID/artifacts" || \
        { echo -e "Can't download artifacts from ${CI_API_V4_URL}/projects/${ORT_GITLAB_CI_PROJECT_ID}/jobs/$JOB_ID/artifacts\nPlease check logs at $web_url"; exit 1; }
      unzip -q ort_artifacts.zip

    - |
      if [[ $status != "success" ]]; then
        echo "$web_url has status $status, failing"
        exit 1
      fi
  needs: []
  artifacts:
    when: always
    expose_as: "ORT Scan Reports"
    paths:
      - ort-results/scan-report-web-app.html
      - ort-results


# # The 'nice' way of triggering downstream pipeline is commented out
# # because it's not possible to retrieve back artifacts this way.
# ort-scan:
#   stage: ort-scan
#   interruptible: true
#   variables:
#     UPSTREAM_BRANCH: $CI_COMMIT_REF_NAME
#     UPSTREAM_PROJECT_PATH: $CI_PROJECT_PATH
#     UPSTREAM_UNIQ_ID: $CI_PIPELINE_ID
#     REQUESTED_BEFORE_SCRIPT: "ls"
#   trigger:
#     project: ${CI_PROJECT_NAMESPACE}/ort-gitlab-ci
#     strategy: depend
#   needs: []
# # This is how artifacts should work:
#   artifacts:
#     paths:
#       - project_to_scan
# # But GitLab (v15.2) can't fetch artifacts from downstream job to upstream defined by
# # the "trigger" keyword. You will have yaml invalid for configuration above.
# # Once it became available this configuration should be used instead of API approach.
# See https://gitlab.com/gitlab-org/gitlab/-/issues/284085

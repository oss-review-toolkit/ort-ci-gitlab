#!/bin/bash -e

[[ -z "$UPSTREAM_PROJECT_ID" ]] && { echo "No upstream project specified"; exit 0; }

# Fetch UPSTREAM_MERGE_REQUEST_IID if pipeline is not an MR pipeline.
UPSTREAM_MERGE_REQUEST_IID=${UPSTREAM_MERGE_REQUEST_IID:-$(
  curl -s -H "PRIVATE-TOKEN:${ORT_MR_API_TOKEN}" \
    "${CI_API_V4_URL}/projects/${UPSTREAM_PROJECT_ID}/repository/commits/${UPSTREAM_COMMIT_SHA}/merge_requests" \
    | jq -r ".[0].iid // empty"
)}

# Exit if no merge request is found.
if [[ -z ${UPSTREAM_MERGE_REQUEST_IID} ]]; then
  echo "No Merge Request found, don't know where to put ort-scan results."
  exit 0
fi

# Generate message for merge request comment.
cat <<- EOF > message.txt
Scan [${CI_JOB_ID}](${CI_JOB_URL}) for [merge request ${UPSTREAM_MERGE_REQUEST_IID}](${UPSTREAM_PROJECT_URL}/-/merge_requests/${UPSTREAM_MERGE_REQUEST_IID}) / [${UPSTREAM_PROJECT_TITLE}](${UPSTREAM_PROJECT_URL}) finished, result is ${CI_JOB_STATUS} (unresolved scan errors: ${ERROR_ISSUES}, unresolved rule violation errors: ${ERROR_VIOLATIONS})

The _scan report_ is available as:

- [Web app]($CI_PROJECT_URL/-/jobs/$CI_JOB_ID/artifacts/file/${ORT_RESULTS_WEB_APP_FILE}) ( Recommended )
- [HTML page]($CI_PROJECT_URL/-/jobs/$CI_JOB_ID/artifacts/file/${ORT_RESULTS_HTML_REPORT_FILE})

EOF

# Generate suggestion for NOTICE file and append merge request comment with it.
if [[ $NOTICE_FILES_DIFFERS == 'true' ]]; then
  NOTICE_FILE_SUGGESTION="\nThe file '$NOTICE_FILE' in your repository differs from the one generated by this scan."
  if [[ $ERROR_ISSUES -eq 0 && $ERROR_VIOLATIONS -eq 0 ]]; then
    NOTICE_FILE_SUGGESTION+="\n\nGenerated open source notices:"
  else
    NOTICE_FILE_SUGGESTION+="\n\nPreliminary open source notices ( resolve all issues for final version ):"
  fi
  NOTICE_FILE_SUGGESTION+="\n\n- [${NOTICE_FILE}]($CI_PROJECT_URL/-/jobs/$CI_JOB_ID/artifacts/file/$ORT_RESULTS_DIR/$NOTICE_FILE)\n"
  echo -e "$NOTICE_FILE_SUGGESTION" >> message.txt
fi

# Fetch id of the first commit from user in merge request.
NOTE_ID=$(
  curl -s -H "PRIVATE-TOKEN:${ORT_MR_API_TOKEN}" \
    "${CI_API_V4_URL}/projects/${UPSTREAM_PROJECT_ID}/merge_requests/${UPSTREAM_MERGE_REQUEST_IID}/notes?sort=asc&order_by=created_at&per_page=50" \
    | jq -r -c --arg ORT_MR_USERNAME "$ORT_MR_USERNAME" '( map(select(.author.username==$ORT_MR_USERNAME )) | first.id ) // empty'
)

NOTES_API_URL="${CI_API_V4_URL}/projects/${UPSTREAM_PROJECT_ID}/merge_requests/${UPSTREAM_MERGE_REQUEST_IID}/notes"
if [[ -z ${NOTE_ID} ]]; then
  echo "Putting new comment to MR"
  curl --request POST --data-urlencode body@message.txt \
    -H "PRIVATE-TOKEN:${ORT_MR_API_TOKEN}" \
    "${NOTES_API_URL}"
else
  echo "Editing existing comment ${NOTE_ID}"
  curl --request PUT --data-urlencode body@message.txt \
  -H "PRIVATE-TOKEN:${ORT_MR_API_TOKEN}" \
  "${NOTES_API_URL}/${NOTE_ID}"
fi

#!/bin/bash

[[ -f "${ORT_RESULTS_EVALUATED_MODEL_FILE}" ]] || { echo "[ERROR] Evaluated model file not found"; exit 1; }

function jq_fail() {
  exit_code=$?
  echo "[ERROR] Can't parse the evaluated model file at ${ORT_RESULTS_EVALUATED_MODEL_FILE}"
  exit $exit_code
}

STATS=$(jq -e '.statistics' "${ORT_RESULTS_EVALUATED_MODEL_FILE}") || jq_fail
echo "export STATS='$STATS'" >> vars.env

ERROR_ISSUES=$(echo $STATS | jq -e '.open_issues.errors') || jq_fail
ERROR_VIOLATIONS=$(echo $STATS | jq -e '.open_rule_violations.errors') || jq_fail

echo "export ERROR_ISSUES='$ERROR_ISSUES'" >> vars.env
echo "export ERROR_VIOLATIONS='$ERROR_VIOLATIONS'" >> vars.env

if [[ $ERROR_ISSUES -eq 0 && $ERROR_VIOLATIONS -eq 0 ]]; then
	echo "Scan has no issues nor violations that have to be fixed."
	exit_code=0
else
	echo "Scan has ${ERROR_ISSUES} issues and ${ERROR_VIOLATIONS} violations that have to be fixed."
	echo "Please check the report for more info."
	exit_code=1
fi	

if [[ $NOTICE_FILES_DIFFERS == 'true' ]]; then
	echo "The file '$NOTICE_FILE' in your repository differs from the one generated by this OSS scan."
	if [[ $exit_code -eq 0 ]]; then
		echo "Generated open source notices:"
	else
		echo "Preliminary open source notices ( resolve all issues for final version ):"
	fi
	echo "Link to $NOTICE_FILE: $CI_PROJECT_URL/-/jobs/$CI_JOB_ID/acts/file/$ORT_RESULTS_DIR/$NOTICE_FILE"
	[[ $FAIL_ON_OUTDATED_NOTICE_FILE == "true" ]] && exit_code=1
fi

if [[ $exit_code -eq 0 ]]; then
	echo "[OK] Setting scan result to 'success'"
else 
	echo "[FAIL] Setting scan result to 'failed'"
fi

exit $exit_code